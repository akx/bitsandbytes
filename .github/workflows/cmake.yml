name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: cmake-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        cuda-version: ['11.8', '12.1']
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Set up MSVC
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1.12.1
      with:
        arch: amd64

    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - uses: Jimver/cuda-toolkit@v0.2.14
      if: ${{ matrix.cuda-version }} == '11.8'
      with:
        cuda: '11.8.0'

    - uses: Jimver/cuda-toolkit@v0.2.14
      if: ${{ matrix.cuda-version }} == '12.1'
      with:
        cuda: '12.1.1'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Prepare
      shell: bash -el {0}
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo CXX_COMPILER=cl >> "$GITHUB_ENV"
            echo C_COMPILER=cl >> "$GITHUB_ENV"
            # without -DCMAKE_CUDA_COMPILER=nvcc, cmake config always fail for cuda-11.8
            echo DCMAKE_CUDA_COMPILER=-DCMAKE_CUDA_COMPILER=nvcc >> "$GITHUB_ENV"
        else
            echo CXX_COMPILER=g++ >> "$GITHUB_ENV"
            echo C_COMPILER=gcc >> "$GITHUB_ENV"
        fi

        nvcc --version

    - name: Prep build
      run: python -m pip install cmake==3.27.9 ninja setuptools wheel

    # TODO: the following steps (CUDA, NOBLASLT, CPU) could be moved to the matrix, so they're built in parallel

    - name: Configure CUDA
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G Ninja ${{ env.DCMAKE_CUDA_COMPILER }}
        -DCMAKE_CXX_COMPILER=${{ env.CXX_COMPILER }}
        -DCMAKE_C_COMPILER=${{ env.C_COMPILER }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOMPUTE_CAPABILITY="50;52;60;61;62;70;72;75;80;86;87;89;90"
        -S ${{ github.workspace }}

    - name: Build CUDA
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Configure NOBLASLT
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G Ninja ${{ env.DCMAKE_CUDA_COMPILER }}
        -DCMAKE_CXX_COMPILER=${{ env.CXX_COMPILER }}
        -DCMAKE_C_COMPILER=${{ env.C_COMPILER }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOMPUTE_CAPABILITY="50;52;60;61;62;70;72;75;80;86;87;89;90"
        -DNO_CUBLASLT=ON
        -S ${{ github.workspace }}

    - name: Build NOBLASLT
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Configure CPU
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G Ninja ${{ env.DCMAKE_CUDA_COMPILER }}
        -DCMAKE_CXX_COMPILER=${{ env.CXX_COMPILER }}
        -DCMAKE_C_COMPILER=${{ env.C_COMPILER }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DNO_CUBLASLT=ON
        -DBUILD_CUDA=OFF
        -S ${{ github.workspace }}

    - name: Build CPU
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build dist
      shell: bash -el {0}
      run: |
        python -m pip install build
        python -m build --wheel
        mkdir dist/cu${{ matrix.cuda-version }}
        mv dist/bitsandbytes*.* dist/cu${{ matrix.cuda-version }}/

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4.3.0
      with:
        name: bitsandbytes-${{ matrix.os }}-${{ matrix.cuda-version }}
        path: |
          ${{ github.workspace }}/dist/
